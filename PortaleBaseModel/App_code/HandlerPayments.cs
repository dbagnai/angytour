using System;
using System.Web;
using System.Web.SessionState;
using System.Collections.Generic;
using WelcomeLibrary.UF;
using WelcomeLibrary.DAL;
using WelcomeLibrary.DOM;
using System.Linq;
using Newtonsoft.Json;
using Stripe;
using Stripe.Checkout;

//https://github.com/stripe/stripe-dotnet
//https://stripe.com/docs/development/quickstart
//https://stripe.com/docs/checkout/integration-builder
//https://stripe.com/docs/payments/cards/overview

//per pagamenri sincroni lato server!! ( non usata )
//https://stripe.com/docs/payments/accept-a-payment-synchronously?platform=web#web-collect-card-details
//webhook to events generated by stripe
//https://stripe.com/docs/payments/handling-payment-events
/// https://webmouse.sytes.net/lib/hnd/HandlerPayments.ashx?q=webhook


public class HandlerPayments : IHttpHandler, IRequiresSessionState
{
    public Dictionary<string, string> parseparams(HttpContext context)
    {
        Dictionary<string, string> pars = new Dictionary<string, string>();
        bool isPost = false;
        isPost = context.Request.HttpMethod.ToUpper() == "POST";
        bool ismultipart = false;
        if (context.Request.ContentType.ToLower().Contains("multipart/form-data")) ismultipart = true;

        if (isPost && !ismultipart)
            pars = HandlerHelper.GetPostParams(context);
        foreach (var item in context.Request.Params.Keys)
        {
            string szKey = item.ToString();
            if (!pars.ContainsKey(szKey))
                pars.Add(szKey, context.Request.Params[szKey].ToString());
        }
        return pars;
    }
    public void ProcessRequest(HttpContext context)
    {
        StripeConfiguration.ApiKey = ConfigManagement.ReadKey("stripe_apiKey");

        string result = "{}";
        context.Response.ContentType = "text/plain";
        //Creo una variabile per la scrittura dei messaggi nel file di log
        System.Collections.Generic.Dictionary<string, string> Messaggi = new System.Collections.Generic.Dictionary<string, string>();
        Messaggi.Add("Messaggio", "");
        try
        {
            //Dictionary<string, string> pars = parseparams(context);  
            string body = HandlerHelper.GetPostContent(context);
            Dictionary<string, string> pars = HandlerHelper.GetParamsJSON(body);
            if (pars == null) pars = new Dictionary<string, string>();
            string q = pars.ContainsKey("q") ? pars["q"] : "";
            string paymentintentid = pars.ContainsKey("paymentintentid") ? pars["paymentintentid"] : "";

            string lingua = pars.ContainsKey("lng") ? pars["lng"] : "I";
            if (string.IsNullOrEmpty(q) && context.Request.QueryString.AllKeys.Contains("q"))
                q = context.Request.QueryString["q"].ToString();

            switch (q)
            {
                case "register-complete-order":
                    //funzione nell'handler alla chiusura dell'ordine se pagamento ok viene chiamata per registrare l'ordine nel database facendo le attivita collegate
                    //(da replicare quanto fatto nella funzione  RegistrazioneOrdinePaypal di ordineok)
                    string sconfirmpaymentdata = pars.ContainsKey("confirmpaymentdata") ? pars["confirmpaymentdata"] : "";
                    Dictionary<string, string> data = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, string>>(sconfirmpaymentdata);
                    Dictionary<string, string> retdictcomplete = new Dictionary<string, string>();
                    string Encodedidordine1 = dataManagement.EncodeToBase64(data["codiceordine"]);
                    string SuccessUrl = (ConfigManagement.ReadKey("SuccessUrl")) + Encodedidordine1 + "&Lingua=" + lingua;
                    string ErrorUrl = (ConfigManagement.ReadKey("CancelUrl")) + Encodedidordine1 + "&error=true" + "&Lingua=" + lingua;
                    //-- > a seguire chiamo la pagine di thankyou con codice pagamento paymentIntentId e codice ordine  (ordineok.aspx, serve per fare solo redirect  per monitoraggio conversioni, testare e controllare i messaggi)
                    retdictcomplete.Add("SuccessUrl", SuccessUrl);
                    retdictcomplete.Add("ErrorUrl", ErrorUrl);

                    context.Session.Remove("thankyoumessages");
                    RegistraCompleteOrder(data["codiceordine"], Encodedidordine1, retdictcomplete, context, lingua); // da valorizzare retdictcomplete error NELLA FUNZIONE in caso di errore ....
                    context.Session.Add("thankyoumessages", retdictcomplete["messages"]); //metto i valori di ritorno in sessione per la thankyoupage CON REDIRECT FINALE

                    //valori per la funzione di ritorno javascript googlejscodetoinject , GoogleConversione, messages
                    //da visualizzare al ritorno
                    result = Newtonsoft.Json.JsonConvert.SerializeObject(retdictcomplete, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings()
                    {
                        NullValueHandling = NullValueHandling.Ignore,
                        MissingMemberHandling = MissingMemberHandling.Ignore,
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        PreserveReferencesHandling = PreserveReferencesHandling.None,
                    });

                    break;
                case "create-and-update-payment-intent":
                    Dictionary<string, string> retdictcu = new Dictionary<string, string>(); //parametri di ritorno per utilizzo del javascript chiamante
                    UpdateDataForOrder(pars, retdictcu, lingua, context); //prepariamo tutto per fare il pagamento
                    string nomeutente = "";
                    string codiceordine = "";
                    if (retdictcu.ContainsKey("nome"))
                        nomeutente = retdictcu["nome"];
                    if (retdictcu.ContainsKey("codiceordine"))
                        codiceordine = retdictcu["codiceordine"];
                    //se non presente il payment intent lo creo
                    if (paymentintentid == "")
                    {
                        //Add an endpoint on your server that creates a PaymentIntent. A PaymentIntent tracks the customer's payment lifecycle, keeping track of any failed payment attempts and ensuring the customer is only charged once. Return the PaymentIntent's client secret in the response to finish the payment on the client.
                        var paymentIntentscreate = new PaymentIntentService();
                        var paymentIntentcreate = paymentIntentscreate.Create(new PaymentIntentCreateOptions
                        {
                            Amount = 50, //CalculateOrderAmount(request.Items), // da calcolare tramite il carrello  passondo il codice ordine o i riferimenti per calcolare il totale dell'ordine !!!!
                            Currency = "eur",
                            //ReceiptEmail = "jenny.rosen@example.com",
                            Metadata = new Dictionary<string, string>
                          {
                                {"nome", nomeutente},
                                {"codiceordine", codiceordine},
                          },
                        });
                        paymentintentid = paymentIntentcreate.Id;
                    }
                    if (paymentintentid != "") // è un update di un intent gia creato all'apertura del modulo ordine
                    {
                        var paymentIntentsUpdate = new PaymentIntentService();
                        var paymentIntentUpdate = paymentIntentsUpdate.Get(paymentintentid);
                        retdictcu.Add("clientSecret", paymentIntentUpdate.ClientSecret);
                        //Update del payment intent
                        if (!(retdictcu.ContainsKey("stoperror") && retdictcu["stoperror"] == "true")) // questo mi dice che c'è un errore e devo stopapre tutto
                        {
                            /// da inseire nle payment il valore amount in centesimi di euro calcolato dalla funzione update dati di ordine
                            /// va' ricalcolato il totale controllando tra l'altro che non sia zero .....
                            long amount = 0;
                            if (retdictcu.ContainsKey("amount")) { long.TryParse(retdictcu["amount"], out amount); }
                            //controllo amount a zero ??? valutare
                            if (amount == 0) amount = 50; //sotto 50 l'intent da errore

                            PaymentIntentUpdateOptions pu = new PaymentIntentUpdateOptions
                            {
                                Amount = amount,// paymentIntentUpdate.Amount 
                                Currency = paymentIntentUpdate.Currency,
                                Metadata = new Dictionary<string, string>
                                {
                                      {"codiceordine", retdictcu["codiceordine"]},
                                },
                            };
                            paymentIntentsUpdate.Update(paymentintentid, pu);
                        }
                        result = Newtonsoft.Json.JsonConvert.SerializeObject(retdictcu, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings()
                        {
                            NullValueHandling = NullValueHandling.Ignore,
                            MissingMemberHandling = MissingMemberHandling.Ignore,
                            ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                            PreserveReferencesHandling = PreserveReferencesHandling.None,
                        });
                    }

                    break;
                case "update-payment-intent":
                    Dictionary<string, string> retdict = new Dictionary<string, string>(); //parametri di ritorno per utilizzo del javascript chiamante
                    UpdateDataForOrder(pars, retdict, lingua, context); //prepariamo tutto per fare il pagamento
                    if (paymentintentid != "") // è un update di un intent gia creato all'apertura del modulo ordine
                    {
                        var paymentIntentsUpdate = new PaymentIntentService();
                        var paymentIntentUpdate = paymentIntentsUpdate.Get(paymentintentid);
                        retdict.Add("clientSecret", paymentIntentUpdate.ClientSecret);
                        //Update del payment intent
                        if (!(retdict.ContainsKey("stoperror") && retdict["stoperror"] == "true")) // questo mi dice che c'è un errore e devo stopapre tutto
                        {
                            /// da inseire nle payment il valore amount in centesimi di euro calcolato dalla funzione update dati di ordine
                            /// va' ricalcolato il totale controllando tra l'altro che non sia zero .....
                            long amount = 0;
                            if (retdict.ContainsKey("amount")) { long.TryParse(retdict["amount"], out amount); }
                            //controllo amount a zero ??? valutare
                            if (amount == 0) amount = 50; //sotto 50 l'intent da errore

                            PaymentIntentUpdateOptions pu = new PaymentIntentUpdateOptions
                            {
                                Amount = amount,// paymentIntentUpdate.Amount 
                                Currency = paymentIntentUpdate.Currency,
                                Metadata = new Dictionary<string, string>
                                {
                                      {"codiceordine", retdict["codiceordine"]},
                                },
                            };
                            paymentIntentsUpdate.Update(paymentintentid, pu);
                        }
                        result = Newtonsoft.Json.JsonConvert.SerializeObject(retdict, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings()
                        {
                            NullValueHandling = NullValueHandling.Ignore,
                            MissingMemberHandling = MissingMemberHandling.Ignore,
                            ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                            PreserveReferencesHandling = PreserveReferencesHandling.None,
                        });
                    }

                    break;
                case "create-payment-intent":
                    //Add an endpoint on your server that creates a PaymentIntent. A PaymentIntent tracks the customer's payment lifecycle, keeping track of any failed payment attempts and ensuring the customer is only charged once. Return the PaymentIntent's client secret in the response to finish the payment on the client.
                    var paymentIntents = new PaymentIntentService();
                    var paymentIntent = paymentIntents.Create(new PaymentIntentCreateOptions
                    {
                        Amount = 50, //CalculateOrderAmount(request.Items), // da calcolare tramite il carrello  passondo il codice ordine o i riferimenti per calcolare il totale dell'ordine !!!!
                        Currency = "eur",
                        //ReceiptEmail = "jenny.rosen@example.com",
                        Metadata = new Dictionary<string, string>
                          {
                            {"codiceordine", ""},
                          },
                    });
                    result = Newtonsoft.Json.JsonConvert.SerializeObject((new { clientSecret = paymentIntent.ClientSecret }), Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings()
                    {
                        NullValueHandling = NullValueHandling.Ignore,
                        MissingMemberHandling = MissingMemberHandling.Ignore,
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        PreserveReferencesHandling = PreserveReferencesHandling.None,
                    });

                    break;
                case "webhook":
                    var stripeEvent = EventUtility.ParseEvent(body, false); //throwOnApiVersionMismatch: false
                    // Handle the event
                    if (stripeEvent.Type == Events.PaymentIntentSucceeded)
                    {
                        var paymentIntentwh = stripeEvent.Data.Object as PaymentIntent;
                        Console.WriteLine("PaymentIntent was successful!");
                    }
                    else if (stripeEvent.Type == Events.PaymentMethodAttached)
                    {
                        var paymentMethod = stripeEvent.Data.Object as PaymentMethod;
                        Console.WriteLine("PaymentMethod was attached to a Customer!");
                    }
                    // ... handle other event types
                    else
                    {
                        Console.WriteLine("Unhandled event type: {0}", stripeEvent.Type);
                    }
                    break;
                default:
                    break;

            }
        }
        catch (Exception ex)
        {
            string er = ex.Message;
            result = Newtonsoft.Json.JsonConvert.SerializeObject((new { messages = er }), Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings()
            {
                NullValueHandling = NullValueHandling.Ignore,
                MissingMemberHandling = MissingMemberHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                PreserveReferencesHandling = PreserveReferencesHandling.None,
            });
            //result = "{ \'error\' : \'" + er + "\'}"; //'{ \"error\": \"prova\" }'

            //Devi scrivere l'errore in un file di log (per gli errori) sennò nessuno lo vede!!!!
            Messaggi["Messaggio"] += " Errore handler common: " + ex.Message + " " + System.DateTime.Now.ToString();
            if (ex.InnerException != null)
                Messaggi["Messaggio"] += " Errore  handler common : " + ex.InnerException.Message.ToString() + " " + System.DateTime.Now.ToString();
            WelcomeLibrary.UF.MemoriaDisco.scriviFileLog(Messaggi, WelcomeLibrary.STATIC.Global.percorsoFisicoComune);
            //context.Response.StatusCode = 400;
        }
        context.Response.Write(result);
        ///////////////////////////////////////////////
    }

    private void RegistraCompleteOrder(string CodiceOrdine, string Encodedidordine, Dictionary<string, string> valuefororder, HttpContext context, string Lingua)
    {
        //Creo una variabile per la scrittura dei messaggi nel file di log (logging order )
        System.Collections.Generic.Dictionary<string, string> Messaggi = new System.Collections.Generic.Dictionary<string, string>();
        Messaggi.Add("Messaggio", "");
        Messaggi["Messaggio"] += "RegistrazioneOrdine Stripe ok, da registrare ordine : " + CodiceOrdine + " " + System.DateTime.Now.ToString() + "\r\n";

        //variabili di messaggisitica di ritorno
        valuefororder.Add("messages", "");
        valuefororder.Add("stoperror", ""); // se errore setto a true
        if (string.IsNullOrEmpty(CodiceOrdine))
        {
            valuefororder["stoperror"] = "true";
            valuefororder["messages"] = "codice ordine nullo, errore registrazione ordine";
            Messaggi["Messaggio"] += valuefororder["messages"];
            WelcomeLibrary.UF.MemoriaDisco.scriviFileLog(Messaggi, WelcomeLibrary.STATIC.Global.percorsoFisicoComune);
            return;
        }
        eCommerceDM ecom = new eCommerceDM();
        //Completiamo l'ordine registrando nel carrello e inviamo le email!! 
        Cliente cliente = new Cliente();
        CarrelloCollection prodotti = new CarrelloCollection();
        TotaliCarrello totali = new TotaliCarrello();
        if (context.Session["totali_" + CodiceOrdine] != null && context.Session["cliente_" + CodiceOrdine] != null && context.Session["prodotti_" + CodiceOrdine] != null)
        {
            cliente = (Cliente)context.Session["cliente_" + CodiceOrdine];
            context.Session.Remove("cliente_" + CodiceOrdine);
            totali = (TotaliCarrello)context.Session["totali_" + CodiceOrdine];
            context.Session.Remove("totali_" + CodiceOrdine);
            prodotti = (CarrelloCollection)context.Session["prodotti_" + CodiceOrdine];
            context.Session.Remove("prodotti_" + CodiceOrdine);

            /////////////////////////////////////////////////////////////////////////////////
            /////QUESTI MESSAGGI PUO VISUALIZZARLI ANCHE LA THANKYOU PAGE VOLENDO!
            /////////////////////////////////////////////////////////////////////////////////
            string jscodetoinject = CommonPage.Creaeventopurchaseagooglegtag(totali, prodotti);
            //valutare se mettere tutto in messages
            valuefororder["messages"] += jscodetoinject;
            valuefororder["messages"] += references.ResMan("Common", Lingua, "GoogleConversione");
            valuefororder["messages"] += references.ResMan("Common", Lingua, "risposta_5");
            valuefororder["messages"] += " Order: " + CodiceOrdine;
        }
        else
        {
            valuefororder["stoperror"] = "true";
            valuefororder["messages"] = "valori ordine non trovati nella sessione , errore registrazione ordine";
            Messaggi["Messaggio"] += valuefororder["messages"];
            WelcomeLibrary.UF.MemoriaDisco.scriviFileLog(Messaggi, WelcomeLibrary.STATIC.Global.percorsoFisicoComune);
            return;
        }
        //Qui devo scrivere nella tabella ordini
        //i dati qui memorizzati ( TBL_CARRELLO_ORDINI )
        //bool authandcapturemode = Convert.ToBoolean(ConfigurationManager.AppSettings["authandcapturePaypal"]);
        //if (!authandcapturemode)
        //    totali.Pagato = true; //Nel caso di transazione paypal con carta in modalità diretta!! la setto pagata!!!
        if (totali.Percacconto == 100)
        { totali.Pagatoacconto = true; totali.Pagato = true; }
        else
            totali.Pagatoacconto = true;
        ecom.InsertOrdine(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, totali);//INSERISCO L'ORDINE NELLA TABELLA ORDINI FINALE TBL_CARRELLO_ORDINI

        //AGGIORNO  I PRODOTTI NEL CARRELLO INSERENDO IL CODICE DI ORDINE E GLI ALTRI DATI ACCESSORI ( TBL_CARRELLO )
        foreach (Carrello item in prodotti)
        {
            item.CodiceOrdine = CodiceOrdine;
            SalvaCodiceOrdine(item, Lingua, valuefororder);
            if (valuefororder["stoperror"] == "true")
            {
                Messaggi["Messaggio"] += valuefororder["messages"];
                WelcomeLibrary.UF.MemoriaDisco.scriviFileLog(Messaggi, WelcomeLibrary.STATIC.Global.percorsoFisicoComune);
                return;
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Prepariamo le richieste di feeback per gli articoli in ordine!!
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#if false
            try
            {
                int J = 0;
                Mail mailfeedback = new Mail();
                J++;
                if (J <= 2)
                {
                    mailfeedback.Sparedict["linkfeedback"] = "";//default preso dalle risorse feedbacksdefaultform
                    mailfeedback.Sparedict["idnewsletter"] = "";//default dalle risorse feedbackdefaultnewsletter
                    mailfeedback.Sparedict["deltagiorniperinvio"] = "";//default dalle risorse feedbacksdefaultdeltagg
                    mailfeedback.Sparedict["idclienti"] = cliente.Id_cliente.ToString();
                    mailfeedback.Id_card = item.id_prodotto;
                    HandlerNewsletter.preparamail(mailfeedback, Lingua); //Preparo le mail nello scheduler!!
                }
            }
            catch { } 
#endif
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////e
            //Decrementiamo anche le quantità per i prodotti che sono a disponibilità limitata
            // togliendo dal catalogo la quantità venduta dell'articolo presente a carrello
            offerteDM offDM = new offerteDM();
            Offerte off = offDM.CaricaOffertaPerId(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, item.id_prodotto.ToString());
            if (off != null)
            {
                if (off.Qta_vendita != null)
                {
                    off.Qta_vendita = off.Qta_vendita.Value - item.Numero;
                    if (off.Qta_vendita < 0) off.Qta_vendita = 0;
                    offDM.UpdateOfferta(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, off);
                    offDM.UpdateOffertaCollegata(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, off);
                }
                else if (!string.IsNullOrEmpty(off.Xmlvalue))
                {
                    //qui devo controllare le disponibilità per tagli/colore
                    List<ModelCarCombinate> listCarr = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ModelCarCombinate>>(off.Xmlvalue);
                    foreach (ModelCarCombinate elem in listCarr)
                    {
                        if (elem.id == item.Campo2)
                        {
                            long qtaCalc = 0;
                            qtaCalc = (Convert.ToInt64(elem.qta)) - item.Numero;
                            if (qtaCalc < 0) elem.qta = "0";
                            else elem.qta = qtaCalc.ToString();
                        }
                    }
                    //Adesso serializzo, sostituisco e risalvo
                    string ret = Newtonsoft.Json.JsonConvert.SerializeObject(listCarr);
                    off.Xmlvalue = ret;

                    offDM.UpdateOfferta(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, off);
                    offDM.UpdateOffertaCollegata(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, off);
                }
            }
        }
        ////////////////////////////////////////
        //Aggiorniamo lo stato degli scaglioni caricati per i prodotti se presenti
        ////////////////////////////////////////
        string listcod = "";
        prodotti.ForEach(item => listcod += item.id_prodotto + ",");
        Dictionary<string, string> parametri = new Dictionary<string, string>();
        parametri["idprodotto"] = listcod;
        ecom.AggiornaStatoscaglioni(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, parametri);
        ////////////////////////////////////////


        /////////////////////////////////////////////////////////////////////////////
        //controllo se presenti CODICISCONTO con uso una tantum e li cancello dalla tabella sconti in modo da impedire riutilizzo
        /////////////////////////////////////////////////////////////////////////////
        try
        {
            string codiciscontousati = totali.Codicesconto;
            eCommerceDM ecmDM = new eCommerceDM();
            Codicesconto _params = new Codicesconto();
            CodicescontoList listcode = new CodicescontoList(); //codici da applicare
            string[] codiciinsessione = codiciscontousati.Split('|');
            if (codiciinsessione != null)
                foreach (string p in codiciinsessione)
                {
                    if (!string.IsNullOrEmpty(p.Trim()))
                    {
                        _params.Testocodicesconto = p;
                        CodicescontoList _tmpcode = ecmDM.CaricaListaSconti(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, _params);
                        if (_tmpcode != null && _tmpcode.Count == 1)
                        {
                            //eliminiamo gli sconti uso singolo (  condizionato alla presenza del prodotto o categoria nel carrello )
                            if (_tmpcode[0].Usosingolo)
                            {
                                //Vediamo se il codicesconto ha riferimenti a prodotto o categoria/sottocategoria presenti nel carrello
                                long idprodottodascontare = (_tmpcode[0].Idprodotto != null) ? _tmpcode[0].Idprodotto.Value : 0;
                                long idscaglionedascontare = (_tmpcode[0].Idscaglione != null) ? _tmpcode[0].Idscaglione.Value : 0;
                                string codicifiltrodascontare = (!string.IsNullOrEmpty(_tmpcode[0].Codicifiltro)) ? _tmpcode[0].Codicifiltro : "";
                                string[] _tmplist = codicifiltrodascontare.Split(',');
                                List<string> listcodicifiltro = (_tmplist != null) ? _tmplist.ToList() : new List<string>();
                                
                                bool bruciacodiceusosingolo = false;
                                //codice senza riferimento a prodotto o categoria -> da bruciare SEMPRE
                                if (!bruciacodiceusosingolo && idprodottodascontare == 0 && string.IsNullOrEmpty(codicifiltrodascontare) && idscaglionedascontare == 0) bruciacodiceusosingolo = true;

                                //controllo presenza prodotto in carrello associato al codice sconto caso id -> da bruciare
                                if (!bruciacodiceusosingolo && idprodottodascontare != 0)
                                    bruciacodiceusosingolo = prodotti.Exists(c => c.id_prodotto == idprodottodascontare);

                                ///CONTROLLO presenza scaglione a carrello associato al codice sconto caso idscaglione -> da bruciare
                                if (!bruciacodiceusosingolo && idscaglionedascontare != 0)
                                    bruciacodiceusosingolo = prodotti.Exists(c => (((String)eCommerceDM.Selezionadajson(c.jsonfield1, "idscaglione", "I")) == idscaglionedascontare.ToString()));

                                //oppure presenza prodotto in carrello associato al codice sconto caso categorie -> da bruciare
                                if (!bruciacodiceusosingolo && listcodicifiltro.Count > 0)
                                    bruciacodiceusosingolo = prodotti.Exists(c => listcodicifiltro.Contains(c.Offerta.CodiceCategoria) || listcodicifiltro.Contains(c.Offerta.CodiceCategoria2Liv));

                                if (bruciacodiceusosingolo)
                                {    //cancellazione codice
                                     // ecmDM.CancellaSconto(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, _tmpcode[0].Id);
                                     //inlaternativa posso settare la data di questi a un giorno passato ( per impedire che venga riusato )
                                    _tmpcode[0].Datascadenza = System.DateTime.Now.AddDays(-1);
                                    if (_tmpcode[0].Usosingolo) ecmDM.InserisciAggiorna(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, _tmpcode[0]);
                                }
                            }
                        }
                    }
                }
        }
        catch { }
        /////////////////////////////////////////////////////////////////////////////


        Messaggi["Messaggio"] += "RegistrazioneOrdine Stripe ok, registrato ordine : " + CodiceOrdine + " " + System.DateTime.Now.ToString() + "\r\n";
        InsertEventoBooking(prodotti, totali, "rif000001");
        //Creiamo il file per export degli ordini...
        //try
        //{
        //    CreaFileExportOrdini(totali, prodotti, cliente);
        //}
        //catch (Exception err)
        //{
        //    output.Text = err.Message + " <br/> ";
        //    switch (Lingua)
        //    {
        //        case "I":
        //            output.Text += "Errore creazione export ordini. Contattatare l'assistenza. ";
        //            break;
        //        case "GB":
        //            output.Text += "Error creating export order. Contact support.";
        //            break;
        //        case "RU":
        //            output.Text += "Error creating export order. Contact support.";
        //            break;
        //        case "FR":
        //            output.Text += "Error creating export order. Contact support.";
        //            break;
        //    }
        //}

        try
        {
            string Nome = ConfigManagement.ReadKey("Nome");
            string Email = ConfigManagement.ReadKey("Email");
            //Inviamo le email di conferma al portale ed al cliente
            string TestoMail = "";
            //Invio la mail per il fornitore
            string SoggettoMailFornitore = references.ResMan("Common", Lingua, "OrdineSoggettomailRichiesta") + Nome;
            TestoMail = CreaMailPerFornitore(totali, prodotti, Lingua);
            Utility.invioMailGenerico(Nome, Email, SoggettoMailFornitore, TestoMail, Email, Nome, null, "", true, context.Server);
            //Utility.invioMailGenerico(totali.Denominazionecliente, totali.Mailcliente, SoggettoMailFornitore, TestoMail, Email, Nome, null, "", true, Server);
            //Invia la mail per il cliente
            string SoggettoMailCliente = references.ResMan("Common", Lingua, "OrdineSoggettomailRiepilogo") + Nome;
            TestoMail = CreaMailCliente(totali, prodotti, Lingua);
            Utility.invioMailGenerico(Nome, Email, SoggettoMailCliente, TestoMail, totali.Mailcliente, totali.Denominazionecliente, null, "", true, context.Server);
        }
        catch (Exception err)
        { //se vuoi visualizza a memorizza l'errore
            Messaggi["Messaggio"] += err.Message + " <br/> ";
        }
        WelcomeLibrary.UF.MemoriaDisco.scriviFileLog(Messaggi, WelcomeLibrary.STATIC.Global.percorsoFisicoComune);
    }
    /// <summary>
    /// Funzione per aggiornamento dati di ordine prima di procedere al pagamento
    /// </summary>
    /// <param name="pars"></param>
    /// <param name="valuefororder"></param>
    /// <param name="Lingua"></param>
    /// <param name="context"></param>
    private void UpdateDataForOrder(Dictionary<string, string> pars, Dictionary<string, string> valuefororder, string Lingua, HttpContext context)
    {
        string scontactdatas = pars.ContainsKey("contactdatas") ? pars["contactdatas"] : "";
        Dictionary<string, string> data = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, string>>(scontactdatas);
        string username = (data.GetValueOrDefault("username") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        valuefororder.Add("messages", "");
        valuefororder.Add("stoperror", "");

        //////////////////////////////////////////////////////////////////
        // CaricaDatiClienteDaForm
        // EQUIVALENTE DELLA FUNZIONE PAGINA ORDERPAGE.ASPX
        // CARICA I DATI DEL CLIENTE DAL FORM ED EVENTUALMENTE LO AGGIORNA NEL DB
        // INOLTRE GENERA L'UTENTE SE RICHIESTO
        //////////////////////////////////////////////////////////////////
        #region CORRISPONDENTE SU HANDLER DELLA FUNZIONE CaricaDatiClienteDaForm DI ORDERPAGE (CARICAMENTO DATI INSERITI NEL MODULO CLIENTE/ORDINE)

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Cliente cliente = new Cliente();
        //Dati Spedizione opzionali
        Cliente clispediz = new Cliente(cliente);
        clispediz.Nome = (data.GetValueOrDefault("nomes") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        clispediz.Cognome = (data.GetValueOrDefault("cognomes") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        clispediz.Cap = (data.GetValueOrDefault("caps") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        clispediz.Indirizzo = (data.GetValueOrDefault("indirizzos") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        clispediz.CodiceNAZIONE = (data.GetValueOrDefault("naziones") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        clispediz.CodiceREGIONE = (data.GetValueOrDefault("regiones") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        clispediz.CodicePROVINCIA = (data.GetValueOrDefault("provincias") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        clispediz.CodiceCOMUNE = (data.GetValueOrDefault("comunes") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        clispediz.Telefono = (data.GetValueOrDefault("telefonos") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        references.SearchGeoCodesByText(clispediz);
        string cliserialized = Newtonsoft.Json.JsonConvert.SerializeObject(clispediz);
        cliente.Serialized = cliserialized; //Appoggio i dati di spedizione in Serialized del cliente !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        //dati primari
        cliente.Nome = (data.GetValueOrDefault("Nome") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        cliente.Cognome = (data.GetValueOrDefault("Cognome") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        cliente.Ragsoc = (data.GetValueOrDefault("Ragsoc") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        cliente.Email = (data.GetValueOrDefault("Email") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        cliente.Telefono = (data.GetValueOrDefault("Telefono") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        cliente.Pivacf = (data.GetValueOrDefault("Pivacf") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        cliente.Emailpec = (data.GetValueOrDefault("Emailpec") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');

        //Fatturazione
        cliente.Cap = (data.GetValueOrDefault("Cap") ?? "");
        cliente.Indirizzo = (data.GetValueOrDefault("Indirizzo") ?? "");
        cliente.CodiceNAZIONE = (data.GetValueOrDefault("CodiceNAZIONE") ?? "");
        cliente.CodiceREGIONE = (data.GetValueOrDefault("CodiceREGIONE") ?? "");
        cliente.CodicePROVINCIA = (data.GetValueOrDefault("CodicePROVINCIA") ?? "");
        cliente.CodiceCOMUNE = (data.GetValueOrDefault("CodiceCOMUNE") ?? "");
        references.SearchGeoCodesByText(cliente);
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////////////////////////////////
        //RICARICAMENTO E VERIFICA PRESENZA UTENTE NEL DB E/O STATO LOGGATO
        //Qui procedo ad aggiornare i dati in TBL_CLIENTI con quelli inseriti nel form
        ///////////////////////////////////////////////////////////////////////////////////////////////////
        usermanager USM = new usermanager();
        ClienteCollection clifiltrati = new ClienteCollection();
        ClientiDM cliDM = new ClientiDM();
        Cliente clitmp = new Cliente();
        string tipologiaclientiecommece = "0"; //LA TIPOLOGIA USATA PER I CLIENTI ECOMMERCE
        clitmp.Email = cliente.Email;
        clitmp.id_tipi_clienti = tipologiaclientiecommece; //ricerco per email SOLO SULLA TIPOLOGIA CLIENTI SPECIFICATA  
        //clitmp.id_tipi_clienti = ""; //ricerco su tutte le tipologie non su una sola

        ////////////////////////////////////////////////////
        //CHECK CORRETTZZA DELLA MAIL INSERITA ( USARE VALIDATORE DELLE MAIL )
        ////////////////////////////////////////////////////
        bool validemail = ActiveUp.Net.Mail.Validator.ValidateSyntax(clitmp.Email);
        if (!validemail)
        {
            valuefororder["messages"] = "Email errata | Invalid Email"; //output.Text = references.ResMan("Common", Lingua, "txtPagamento").ToString();
            valuefororder["stoperror"] = "true";
            return;
        }

        ////////////////////////////////////////////////////
        // cerco in anagrafica cliente con la mail/tipologia inserita
        ////////////////////////////////////////////////////
        Cliente clienteinanagraficaperemail = cliDM.CaricaClientePerEmail(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, clitmp.Email, clitmp.id_tipi_clienti);
        bool generazioneutente = false;
        if (!string.IsNullOrEmpty(username)) //UTENTE MEMBERSHIP LOGGATO  -> VERIFICHE SU DATI INSERITI E AGGIONAMENTO DATI CLIENTE
        {
            //PER PRIMA PRENDO IL CLIENTE CORRISPONDENTE PER L'UTENTE LOGGATO SE PRESENTE
            //(IL CLIENTE LOGGATO E' PRIMARIO RISPETTO AL QUELLO ASSOCIATO ALLA MAIL INSERITA!!)
            string idcliente = CommonPage.getidcliente(username); //prendo l'id anagrafica associato al cliente loggato ( se disponibile )
            Cliente cbyid = cliDM.CaricaClientePerId(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, idcliente); //prende il cliente per idcliente con qualsiasi tipologia questo avesse
            if (cbyid == null || cbyid.Id_cliente == 0) //non presente cliente anagrafica associato alla login
            {
                //Utente loggato ma non ha nessun cliente associato (anomalia !) ( blocco l'ordine )
                valuefororder["messages"] = "Errore. Non trovato utenza associata alla login attuale, cambiare utente o registrarsi per procedere!"; //output.Text = references.ResMan("Common", Lingua, "txtPagamento").ToString();
                valuefororder["stoperror"] = "true";
                return;
            }
            else
            {
                if (clienteinanagraficaperemail != null && clienteinanagraficaperemail.Id_cliente != cbyid.Id_cliente)
                {
                    //Presente altro cliente in anagrafica con quella mail/tipologia inserita nel form non coincidente con il cliente loggato !!!!!
                    //output.Text = "Errore. La mail inserita è già in anagrafica associata ad altro utente, recuperare la login o inserire altra mail per procedere!";
                    valuefororder["messages"] = references.ResMan("Common", Lingua, "txterrconincidenzaemail").ToString();
                    valuefororder["stoperror"] = "true";
                    return;
                }
                clifiltrati.Add(cbyid); //procedo aggiornando il cliente associato a quello loggato per l'aggiornamento dei dati dal form acquisto
            }
        }
        else  //UTENTE NON LOGGATO -> AGGIORNAMENTO + VERIFICA GENERAZIONE UTENTE MEMBERSHIP
        {
            if (clienteinanagraficaperemail != null && clienteinanagraficaperemail.Id_cliente != 0) //Presente in anagrafica cliente con la mail inserita nel form e ma utente attuale non loggato
            {
                clifiltrati.Add(clienteinanagraficaperemail);//aggiorno il cliente caricato per email  
                //DEVO CERCARE SE IL CLIENTE ASSOCIATO HA UN UTENTE CORRISPONDENTE NEL MEMBERSHIP IN CASO NEGATIVO INSERISCO L'UTENTE NUOVO
                string usernametmp = USM.GetUsernamebycamporofilo("idCliente", clienteinanagraficaperemail.Id_cliente.ToString());
                if (string.IsNullOrEmpty(usernametmp)) //non presente utente associato al cliente! -> lo devo generare ex novo
                    generazioneutente = true;
            }
            //Se non presente utente con la mail/tipologia indicata viene inserito e genero l'utente corrispondente
            else generazioneutente = true;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////
        //INSERIMENTO O AGGIORNAMENTO CLIENTE ANAGRAFICA
        //////////////////////////////////////////////////////////////////////////////////////////////
        if (clifiltrati != null && clifiltrati.Count > 0) //trovato cliente corrispondente nel database da aggiornare ( aggiorno solo i campi specifici dal form acquisto )
        {
            //Su tutti i clienti trovati nel db aggiono i campi non modificando gli altri
            foreach (Cliente c in clifiltrati)
            {
                Cliente ctmp = new Cliente(c);
                //Aggiorno nel db solo i campi che sono nel form
                ctmp.CodiceNAZIONE = cliente.CodiceNAZIONE;
                ctmp.CodiceCOMUNE = cliente.CodiceCOMUNE;
                ctmp.CodicePROVINCIA = cliente.CodicePROVINCIA;
                ctmp.CodiceREGIONE = (!string.IsNullOrEmpty(cliente.CodiceREGIONE) ? cliente.CodiceREGIONE : ctmp.CodiceREGIONE);//Se vuoto mantengo il vecchio valore
                ctmp.Nome = cliente.Nome;
                ctmp.Cognome = cliente.Cognome;
                ctmp.Ragsoc = cliente.Ragsoc;
                ctmp.Email = cliente.Email;
                ctmp.Emailpec = cliente.Emailpec;
                ctmp.Pivacf = cliente.Pivacf;
                ctmp.Indirizzo = cliente.Indirizzo;
                ctmp.Cap = cliente.Cap;
                ctmp.Telefono = cliente.Telefono;
                ctmp.Serialized = cliente.Serialized; //Dati serializzati aggiuntivi
                cliDM.InserisciAggiornaCliente(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, ref ctmp);
                cliente.Id_cliente = ctmp.Id_cliente;
            }
        }
        else //NON TROVATO ALCUN cliente con quella mail nella tipologia cercata  -> lo inserisco NUOVO nel database 
        {
            //MEMORIZZO CON LINGUA E CONSENSI ATTIVI PER NEWSLETTER E STORICIZZAZIONE CLIENTE
            //cliente.DataNascita = System.DateTime.Now.Date;
            cliente.DataRicezioneValidazione = System.DateTime.Now.Date;
            cliente.Lingua = Lingua;
            cliente.Consenso1 = true;
            cliente.ConsensoPrivacy = true;
            cliente.Validato = true;
            cliente.id_tipi_clienti = tipologiaclientiecommece; // tipologia impostata per ecommerce
            cliDM.InserisciAggiornaCliente(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, ref cliente);
        }

        //////////////////////////////////////////////////////////////////////////////////////////////
        //SE richiesto GENERIAMO L'UTENTE NEL MEMBERSHIP E INVIAMO UNA MAIL DI CONFERMA AL CLIENTE CON I DATI DI REGISTRAZIONE
        //////////////////////////////////////////////////////////////////////////////////////////////
#if false
        if (generazioneutente)
        {
            string password = "";
            string usernamenew = cliente.Id_cliente.ToString() + "-" + cliente.Email;
            if (USM.VerificaPresenzaUtente(usernamenew)) //controllo se utente esistente -> devo avvisare che presente!!!
            {
                valuefororder["messages"] = "Utente " + usernamenew + " già registrato! Fare recupero della password o contattate il supporto per il recupero dell'acesso!";
                //devo avvisare l'utente!
            }
            else //utente da creare ex novo
            {
                USM.CreaUtente(cliente.Id_cliente.ToString(), ref usernamenew, ref password, "Operatore");
                ///////////////////////////////////////////////////////////
                //INVIA MAIL REGISTRAZIONE ALL'UTENTE
                string oggetto = references.ResMan("Common", Lingua, "txtoggettocreateuser").ToString();
                oggetto += " " + ConfigManagement.ReadKey("Nome");
                string testo = references.ResMan("Common", Lingua, "txttestocreateuser").ToString();
                testo = testo.Replace("|NOME|", ConfigManagement.ReadKey("Nome"));
                testo = testo.Replace("|CREDENZIALI|", "User: " + usernamenew + " Pass: " + password);
                testo = testo.Replace("|LOGINPAGE|", "<a href=" + CommonPage.ReplaceAbsoluteLinks(references.ResMan("Common", "I", "linklogin")) + ">" + CommonPage.ReplaceAbsoluteLinks(references.ResMan("Common", "I", "linklogin")) + "</a>");
                testo += references.ResMan("Common", "I", "txtFooter").ToString();
                Utility.invioMailGenerico(ConfigManagement.ReadKey("Nome"), ConfigManagement.ReadKey("Email"), oggetto, testo, cliente.Email, cliente.Cognome);
                ///////////////////////////////////////////////////////////
            }
        } 
#endif
        //////////////////////////////////////////////////////////////////////////////////////////////
        #endregion
        //////////////////////////////////////////////////////////////////
        // FINE  CaricaDatiClienteDaForm
        //////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////
        // Funzione   AggiornaDatiPerOrdine
        // EQUIVALENTE DELLA FUNZIONE PAGINA ORDERPAGE.ASPX
        // AGGIORNA I TOTALI DEL CARRELLO E GENERA IL CODICE ORDINE ( NON EFFETTUA L'ORDINE )
        //////////////////////////////////////////////////////////////////
        #region CORRISPONDENTE SU ANDLER DELLA FUNZIONE AggiornaDatiPerOrdine IN ORDERPAGE ( AGGIORNAMENTO CARRELLO E DATI ORDINE )
        string CodiceOrdine = "";
        TotaliCarrello totali = new TotaliCarrello();
        CarrelloCollection prodotti = new CarrelloCollection();
        context.Session.Add("Lingua", Lingua); //Memorizzo in session  pure la lingua per mantenerla nelle chiamate di risposta dal sistema di pagamento

        //////////////////////////////////////////////////////////////////
        //STEP 1 ORDINE AGGIORNAMENTO DATI CLIENTE E CARRRELLO IN BASE ALLE SELEZIONI SUL FORM E GENERAZIONE CODICE ORDINE!
        //////////////////////////////////////////////////////////////////
        string modalita = (data.GetValueOrDefault("Modalita") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        string supplementoisole = (data.GetValueOrDefault("supplementoisole") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        string supplementocontrassegno = (data.GetValueOrDefault("supplementocontrassegno") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        string note = (data.GetValueOrDefault("Note") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        Dictionary<string, object> parametriordine = new Dictionary<string, object>();
        parametriordine.Add("modalita", modalita);
        bool btmp = false;
        bool.TryParse(supplementoisole, out btmp);
        parametriordine.Add("supplementoisole", btmp);
        btmp = false;
        bool.TryParse(supplementocontrassegno, out btmp);
        parametriordine.Add("supplementocontrassegno", btmp);
        parametriordine.Add("note", note);
        string chkspedizione = (data.GetValueOrDefault("chkSpedizione") ?? "").Trim().Trim('\t').Trim('\\').Trim('\r').Trim('\n');
        var bspediz = true;
        bool.TryParse(chkspedizione, out bspediz);
        parametriordine.Add("chkspedizione", bspediz);

        string reterr = AggiornaDatiPerOrdine(parametriordine, ref CodiceOrdine, ref cliente, ref totali, ref prodotti, Lingua, username, context);
        //PER STRIPE IL TOTALE DEVE ESSERE INTERO ED IN CENTESIMI DI EURO QUINDI (logn)amount*100 
        long amount = 0; // importo da pagare in centesimi di euro
        if (totali.Percacconto != 100)
            amount = (long)(totali.TotaleAcconto * 100);
        else
            amount = (long)((totali.TotaleAcconto + totali.TotaleSaldo) * 100);

        valuefororder["amount"] = amount.ToString();
        valuefororder["codiceordine"] = CodiceOrdine;
        valuefororder["nome"] = cliente.Cognome + " " + cliente.Nome;
        if (!string.IsNullOrEmpty(reterr))  //se errore preparazione dati non procedo
        {
            valuefororder["messages"] = reterr;
            valuefororder["stoperror"] = "true";
            return;
        }
        #endregion
        ///////////////////////////
    }

    /// <summary>
    /// Funzione aggiornamento carrello e codice ordine prima del pagamento
    /// </summary>
    /// <param name="parametri"></param>
    /// <param name="CodiceOrdine"></param>
    /// <param name="cliente"></param>
    /// <param name="totali"></param>
    /// <param name="prodotti"></param>
    /// <param name="username"></param>
    /// <param name="context"></param>
    /// <returns></returns>
    private string AggiornaDatiPerOrdine(Dictionary<string, object> parametri, ref string CodiceOrdine, ref Cliente cliente, ref TotaliCarrello totali, ref CarrelloCollection prodotti, string Lingua, string username, HttpContext context)
    {
        #region aggiornamento carrello  e dati cliente prima dell'ordine
        string ret = "";
#if true
        //////////////////////////////////////////////////////////////////
        //PROCEDURA AGGIORNAMENTO TOTALI E ORDINE
        //////////////////////////////////////////////////////////////////
        //se Ho gia generato un codice ordine svuoto la session  totali, prodotti e cliente prima di ricalcolarli
        if (HttpContext.Current.Session["tmpCodiceOrdine"] != null)
        {
            string tmpcodiceordine = context.Session["tmpCodiceOrdine"].ToString();
            context.Session.Remove("cliente_" + tmpcodiceordine);
            context.Session.Remove("totali_" + tmpcodiceordine);
            context.Session.Remove("prodotti_" + tmpcodiceordine);
            context.Session.Remove("tmpCodiceOrdine");
        }
        //Per prima cosa mi riprendo i dati del carrello in base alla sessione per completare l'ordine
        //Verifico per un ultima volta che tutto sia a posto che le quantità non superino la disponibilità
        prodotti = new CarrelloCollection();
        eCommerceDM ecom = new eCommerceDM();
        string sessionid = "";
        string trueIP = "";
        CommonPage.CaricaRiferimentiCarrello(context.Request, context.Session, ref sessionid, ref trueIP); //leggo i riferimenti per il caricamento del carrello
        prodotti = ecom.CaricaCarrello(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, context.Session.SessionID, trueIP);
        AggiornaDatiUtenteSuCarrello(prodotti, cliente.Id_cliente, username, context);  //aggiorno il codice cliente e sconto nel carrello
        if (prodotti != null && prodotti.Count > 0)
        {
            //vERIFICA finale PER IL BOOKING PRIMA DI ORDINARE!!!
            if (!VerificaDisponibilitaEventoBooking(prodotti, "rif000001"))
            {
                ret = references.ResMan("basetext", Lingua, "testoprenotaerr1").ToString();
                return ret;
            }
            ////////////////////////////////////
            prodotti.Sort(new GenericComparer<Carrello>("Data", System.ComponentModel.ListSortDirection.Descending));
            //Genero il codice ordine dato che il cliente me lo ha confermato e me lo salvo in tabella per tutti i prodotti del carrello attuale
            //In modo da associarli ad un ordine preciso in caso di successo dell'invio del pagamento o della  mail
            CodiceOrdine = GeneraCodiceOrdine();

            bool supplementoisole = (bool)parametri["supplementoisole"];// chkSupplemento.Checked;
            bool supplementocontrassegno = (bool)parametri["supplementocontrassegno"];// inpContanti.Checked;
            totali = CommonPage.CalcolaTotaliCarrello(context.Request, context.Session, cliente.CodiceNAZIONE, "", supplementoisole, supplementocontrassegno);

            //PRENDIAMO I DATI DAL FORM PER LA PREPARAZIONE ORDINE //////////////////////////////////////////////////////////////////
            totali.Denominazionecliente = cliente.Cognome + " " + cliente.Nome;
            if (!string.IsNullOrEmpty(cliente.Ragsoc))
                totali.Denominazionecliente += cliente.Ragsoc + "<br/>";
            totali.Mailcliente = cliente.Email;
            totali.Dataordine = System.DateTime.Now;
            totali.CodiceOrdine = CodiceOrdine;
            totali.Indirizzofatturazione = cliente.Cognome + " " + cliente.Nome + "<br/>";
            totali.Indirizzofatturazione += cliente.Indirizzo + "<br/>";
            totali.Indirizzofatturazione += cliente.Cap + " " + cliente.CodiceCOMUNE + "  (" + ((!(string.IsNullOrWhiteSpace(references.NomeProvincia(cliente.CodicePROVINCIA, Lingua)))) ? references.NomeProvincia(cliente.CodicePROVINCIA, Lingua) : cliente.CodicePROVINCIA) + ")<br/>";
            totali.Indirizzofatturazione += "Nazione: " + cliente.CodiceNAZIONE + "<br/>";
            totali.Indirizzofatturazione += "Telefono: " + cliente.Telefono + "<br/>";
            totali.Indirizzofatturazione += "P.Iva: " + cliente.Pivacf + "<br/>";
            totali.Indirizzofatturazione += "CodiceDestinatario/Pec: " + cliente.Emailpec + "<br/>";

            //SE INDIRIZZO SPEDIIZONE DIVERSO -> LO MEMORIZZO NEI TOTALI ( E serializzo il dettaglio nel cliente nel campo serialized )
            string indirizzospedizione = "";
            if (parametri.ContainsKey("chkspedizione") && !(bool)parametri["chkspedizione"])
            {
                /////////////////////////////////////
                //prendiamO dati spedizione dal cliente serializzato .... in accordo col metodo usato per fatturazione anziche dal form
                Cliente clispediz = Newtonsoft.Json.JsonConvert.DeserializeObject<Cliente>(cliente.Serialized);
                /////////////////////////////////////
                if (clispediz != null)
                {
                    //  inpProvinciaS.Value = (!(string.IsNullOrWhiteSpace(NomeProvincia(clispediz.CodicePROVINCIA, Lingua)))) ? NomeProvincia(clispediz.CodicePROVINCIA, Lingua) : clispediz.CodicePROVINCIA;
                    if (!string.IsNullOrWhiteSpace(clispediz.Cognome) || !string.IsNullOrWhiteSpace(clispediz.Nome))
                        indirizzospedizione += clispediz.Cognome + " " + clispediz.Nome + "<br/>";
                    else
                        indirizzospedizione += cliente.Cognome + " " + cliente.Nome + "<br/>";

                    if (!string.IsNullOrEmpty(clispediz.Indirizzo))
                        indirizzospedizione += clispediz.Indirizzo + "<br/>";
                    if (!string.IsNullOrEmpty(clispediz.Cap) && !string.IsNullOrEmpty(clispediz.CodiceCOMUNE) && !string.IsNullOrEmpty(clispediz.CodicePROVINCIA))
                    {
                        indirizzospedizione += clispediz.Cap + " " + clispediz.CodiceCOMUNE + "  (" + ((!(string.IsNullOrWhiteSpace(CommonPage.NomeProvincia(clispediz.CodicePROVINCIA, Lingua)))) ? CommonPage.NomeProvincia(clispediz.CodicePROVINCIA, Lingua) : clispediz.CodicePROVINCIA) + ")<br/>";
                        indirizzospedizione += "Nazione: " + clispediz.CodiceNAZIONE + "<br/>";
                    }
                    if (!string.IsNullOrEmpty(clispediz.Telefono))
                        indirizzospedizione += "Telefono: " + clispediz.Telefono + "<br/>";
                }
                totali.Indirizzospedizione = indirizzospedizione;
            }
#if false   // con questa visualizza sempre la spedizione
                if (string.IsNullOrWhiteSpace(indirizzospedizione))
                {
                    totali.Indirizzospedizione = totali.Indirizzofatturazione;
                } 
#endif
            totali.Note = (string)parametri["note"];
            totali.Modalitapagamento = (string)parametri["modalita"];

            //Valorizzato solo alla ricezione del pagamento prima della spedizione o tramite la procedura con pagamento anticipato
            if (totali.Percacconto == 100)
            { totali.Pagato = false; totali.Pagatoacconto = false; } // da capire se acconto è zero se vogliamo spuntare pagato acconto!
            else
            { totali.Pagato = false; totali.Pagatoacconto = false; }
            totali.Urlpagamento = "";

            //Prepariamo i valori per la chiamata a Paypal
            context.Session.Add("tmpCodiceOrdine", CodiceOrdine);
            context.Session.Add("cliente_" + CodiceOrdine, cliente); //Mettiamo tutto in sessione per riaverlo alla conferma dell'esito positivo della transazione
            context.Session.Add("totali_" + CodiceOrdine, totali); //Mettiamo tutto in sessione per riaverlo alla conferma dell'esito positivo della transazione
            context.Session.Add("prodotti_" + CodiceOrdine, prodotti); //Mettiamo tutto in sessione per riaverlo alla conferma dell'esito positivo della transazione
        }
        else
        {
            ret = " Carrello vuoto / Empty order list.";
        }
#endif
        return ret;
        #endregion
    }
    private void AggiornaDatiUtenteSuCarrello(CarrelloCollection carrello, long idcliente = 0, string username = "", HttpContext context = null)
    {
        string codicesconto = "";
        if (context.Session["codicesconto"] != null) codicesconto = context.Session["codicesconto"].ToString();
        foreach (Carrello c in carrello)
        {
            c.ID_cliente = idcliente;
            c.Codicesconto = codicesconto; //metto il codice sconto nella lista prodotti nel carrello
            CommonPage.AggiornaProdottoCarrello(context.Request, context.Session, c.id_prodotto, c.Numero, username, c.Campo2, c.ID, idcliente, c.Prezzo, c.Datastart, c.Dataend, c.jsonfield1);
        }
    }
    protected string GeneraCodiceOrdine()
    {
        string CodiceOrdine = "";

#if true
        bool esito = true;
        while (esito)
        {
            System.Threading.Thread.Sleep(1000);
            //creo un Codice Ordine Univoco
            CodiceOrdine = WelcomeLibrary.UF.RandomPassword.Generate(9, 9, new char[][]
            {
                WelcomeLibrary.UF.RandomPassword.PASSWORD_CHARS_NUMERIC.ToCharArray()
            });
            //CodiceOrdine = "ord_" + CodiceOrdine;
            eCommerceDM ecom = new eCommerceDM();
            esito = ecom.VerificaPresenzaCodiceOrdine(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, CodiceOrdine);
        }
#endif
        return CodiceOrdine;
    }
    protected void SalvaCodiceOrdine(Carrello item, string Lingua, Dictionary<string, string> valuefororder)
    {
        try
        {
            //salvo  il codice ordine nel db come ordine avvenuto
            if (item != null)
            {
                eCommerceDM ecom = new eCommerceDM();
                ecom.UpdateCarrello(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, item);
            }
        }
        catch (Exception err)
        {
            valuefororder["stoperror"] = "true";
            valuefororder["messages"] += err.Message + " <br/> ";
            switch (Lingua)
            {
                case "I":
                    valuefororder["messages"] += "Errore salvataggio codice Ordine ";
                    break;
                case "GB":
                    valuefororder["messages"] += "Error save Codice Ordine";
                    break;
                case "RU":
                    valuefororder["messages"] += "Error save Codice Ordine";
                    break;
                case "FR":
                    valuefororder["messages"] += "Error save CodiceOrdine";
                    break;
            }
            return;
        }
    }
    protected string CreaMailPerFornitore(TotaliCarrello totali, CarrelloCollection prodotti, string Lingua)
    {
        string TestoMail = "";
        //Mi preparo il testo della mail (formattiamo in html)
        TestoMail += "<table cellpadding='0' cellspacing='0'  style='font-size:14px;'>";
        TestoMail += "<tr><td> Ordine effettuato da " + totali.Denominazionecliente + " tramite sito " + ConfigManagement.ReadKey("Nome") + "  <br/>";
        TestoMail += "<br/><b>EMAIL CLIENTE :</b>  <br/>";
        TestoMail += totali.Mailcliente;
        TestoMail += "<br/><b>Indirizzo fatturazione</b> : <br/> ";
        TestoMail += totali.Indirizzofatturazione + "<br/>";
        if (!string.IsNullOrEmpty(totali.Indirizzospedizione))
        {
            TestoMail += "<br/><b>Indirizzo spedizione</b> : <br/> ";
            TestoMail += totali.Indirizzospedizione;
        }
        TestoMail += "</td></tr>";
        if (!string.IsNullOrEmpty(totali.Note))
            TestoMail += "<tr><td> <br/>Note : " + totali.Note + "<br/></td></tr>";
        TestoMail += "<tr><td><table cellpadding='0' cellspacing='0' style='font-size:14px;'><tr><td><br/> DETTAGLIO ORDINE </td></tr>";
        TestoMail += "<tr><td> <br/><b>CODICE ORDINE</b> : " + totali.CodiceOrdine + "<br/></td></tr>";
        int i = 1;
        foreach (Carrello item in prodotti)
        {
            TestoMail += "<tr><td><br/><b>Articolo:</b> " + item.Offerta.DenominazioneI + "<br/>";
            //DATE A CARRELLO SE PRESENTI
            if (item.Dataend != null && item.Datastart != null)
            {
                TestoMail += "<b>" + references.ResMan("Common", Lingua, "formtestoperiododa") + " " + string.Format("{0:dd/MM/yyyy HH:mm:ss}", item.Datastart.Value) + "</b> ";
                TestoMail += "<b>" + references.ResMan("Common", Lingua, "formtestoperiodoa") + " " + string.Format("{0:dd/MM/yyyy HH:mm:ss}", item.Dataend.Value) + "</b><br/> ";
            }
            //CARATTERISTICHE CARRELLO IN BASE ALLE PROPRIETA IN jsonfield1
            if (!string.IsNullOrEmpty(item.jsonfield1))
            {
                string valore3 = (String)eCommerceDM.Selezionadajson(item.jsonfield1, "adulti", Lingua);
                string valore4 = (String)eCommerceDM.Selezionadajson(item.jsonfield1, "bambini", Lingua);
                if (!string.IsNullOrEmpty(valore3))
                    TestoMail += "<br/>" + "<b>" + references.ResMan("basetext", Lingua, "formtesto" + "adulti") + ": " + "</b>" + valore4 + "<br/>";
                if (!string.IsNullOrEmpty(valore4))
                    TestoMail += " " + "<b>" + references.ResMan("basetext", Lingua, "formtesto" + "bambini") + ": " + "</b>" + valore4 + "<br/>";
            }
            //CARATTERISTICHE
            string valore1 = (String)eCommerceDM.Selezionadajson(item.jsonfield1, "Caratteristica1", Lingua);
            string valore2 = (String)eCommerceDM.Selezionadajson(item.jsonfield1, "Caratteristica2", Lingua);
            if (!string.IsNullOrEmpty(valore1) || !string.IsNullOrEmpty(valore2))
            {
                valore1 = references.TestoCaratteristica(0, valore1, Lingua);
                if (!string.IsNullOrEmpty(valore1))
                    TestoMail += " <b>" + references.ResMan("basetext", Lingua, "formtesto" + "Caratteristica1") + ": " + "</b>" + valore1;
                valore2 = references.TestoCaratteristica(1, valore2, Lingua);
                if (!string.IsNullOrEmpty(valore2))
                    TestoMail += " <b>" + references.ResMan("basetext", Lingua, "formtesto" + "Caratteristica2") + ": " + "</b>" + valore2;
            }
            //ALTRI VALORI DA jsonfield1
            //////////////////////////////////
            //INSERIMENTO DATI PER SCAGLIONI
            //////////////////////////////////
            //string prezzoscaglione = eCommerceDM.Selezionadajson(item.jsonfield1, "prezzo", Lingua);
            string datapartenza = WelcomeLibrary.UF.Utility.reformatdatetimestring((string)eCommerceDM.Selezionadajson(item.jsonfield1, "datapartenza", Lingua));
            string dataritorno = WelcomeLibrary.UF.Utility.reformatdatetimestring((string)eCommerceDM.Selezionadajson(item.jsonfield1, "dataritorno", Lingua));
            string idscaglione = (String)eCommerceDM.Selezionadajson(item.jsonfield1, "idscaglione", Lingua);
            //scaglione completo nel carrello
            //Scaglioni scaglionedacarrello = Newtonsoft.Json.JsonConvert.DeserializeObject<Scaglioni>((String)eCommerceDM.Selezionadajson(item.jsonfield1, "scaglione", Lingua));
            if (!string.IsNullOrEmpty(idscaglione) || !string.IsNullOrEmpty(datapartenza))
            {
                if (!string.IsNullOrEmpty(datapartenza))
                    TestoMail += "<b>" + references.ResMan("basetext", Lingua, "formtesto" + "scaglionedata") + "</b>" + datapartenza + "<br/>";
                if (!string.IsNullOrEmpty(idscaglione))
                    TestoMail += "<b>" + references.ResMan("basetext", Lingua, "formtesto" + "scaglionedataritorno") + "</b>" + dataritorno + "<br/>";
                if (!string.IsNullOrEmpty(idscaglione))
                    TestoMail += "<b>" + references.ResMan("basetext", Lingua, "formtesto" + "scaglioneid") + "</b>" + idscaglione + "<br/>";
            }
            if (!string.IsNullOrWhiteSpace(item.CodiceProdotto))
                TestoMail += "<b>Codice Articolo : </b>" + item.CodiceProdotto + "<br/>";
            TestoMail += "<b>Id articolo :</b> " + item.Offerta.Id.ToString() + "<br/>";
            if (!string.IsNullOrEmpty(item.Campo2))
            {
                List<ModelCarCombinate> listCarr = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ModelCarCombinate>>(item.Offerta.Xmlvalue);
                ResultAutocomplete taglia = new ResultAutocomplete();
                ResultAutocomplete colore = new ResultAutocomplete();
                ModelCarCombinate elem = listCarr.Find(e => e.id == item.Campo2);
                if (elem != null)
                    TestoMail += " - " + references.ResMan("BaseText", Lingua, "selectcat1") + " : " + elem.caratteristica1.value + " - " + references.ResMan("BaseText", Lingua, "selectcat2") + " : " + elem.caratteristica2.value + "<br/>";
            }
            TestoMail += "<b> Quantità :</b> " + item.Numero + "<br/>";
            if (item.Prezzo != 0)
                TestoMail += "<b>  Prezzo Unitario :</b> " + item.Prezzo + " €<br/>";

            //QUI POSSIAMO INSERIRE I DETTAGLI SE E' UN PACCHETTO KIT OFFERTA
            //if (item != null && item.Offerta != null && item.Offerta.CodiceTipologia == "rif000101")
            //{
            //    TestoMail += "      Prodotti Contenuti nel pacchetto:<br/>";
            //    List<ResultAutocomplete> listprod = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ResultAutocomplete>>(item.Offerta.XmlValue);
            //    foreach (ResultAutocomplete p in listprod) //Calcolo il totale non scontato del kit ->
            //    {
            //        TestoMail += "      Codice:" + p.codice + " Descrizione:" + p.value + " Qta:" + p.qta + "<br/>";
            //    }
            //}

            TestoMail += " <br/></td></tr>";
            i++;
        }


        TestoMail += "<tr><td>Totale Articoli " + totali.TotaleOrdine + " € </td></tr>";
        if (totali.TotaleSconto != 0)
            TestoMail += "<tr><td><br/>Sconto applicato " + totali.TotaleSconto + " € </td></tr>";
        TestoMail += "<tr><td>";
        if (totali.TotaleSpedizione != 0)
            TestoMail += "<br/>Spese di spedizione " + totali.TotaleSpedizione + " €<br/>";
        if (totali.TotaleSmaltimento != 0)
            TestoMail += "<br/>Spese smaltimento(PFU) " + totali.TotaleSmaltimento + " €<br/>";
        if (totali.TotaleAssicurazione != 0)
            TestoMail += "Totale Assicurazione " + totali.TotaleAssicurazione + "  €<br/>";
        if (totali.Nassicurazioni != 0)
            TestoMail += "( Assicurazione per " + totali.Nassicurazioni + "  Persone )<br/>";
        TestoMail += "<b>Totale ordine complessivo:</b> " + (totali.TotaleAcconto + totali.TotaleSaldo) + " €</td></tr>";

        if (totali.Percacconto != 100)
        {
            TestoMail += "<tr><td><b>PAGATO ACCONTO </b> " + totali.Percacconto + "% :</b> " + (totali.TotaleAcconto) + " €</td></tr>";
            TestoMail += "<tr><td><b>DA SALDARE ENTRO 30 GG DATA PARTENZA" + ":</b> " + totali.TotaleSaldo + " €</td></tr>";
        }
        else
            TestoMail += "<tr><td><b>PAGATO SALDO  :</b> " + (totali.TotaleAcconto + totali.TotaleSaldo) + " €</td></tr>";

        TestoMail += "<tr><td><br/>Metodo di pagamento:  " + references.ResMan("Common", Lingua, "chk" + totali.Modalitapagamento).ToString() + " </td></tr>";

        //chiudo tabella e riga relativa
        TestoMail += "</table></td><tr/>";
        TestoMail += "<tr><td><br/>L'utente ha correttamente pagato tramite la modalità qui indicata, è in attesa di vorstro contatto per la spedizione della merce.";

        TestoMail += "<tr><td><br/>Il cliente ha selezionato :  " + references.ResMan("Common", Lingua, "chkcondizioni").ToString() + " </td></tr>";

        TestoMail += "</td></tr></table>";

        return TestoMail;
    }
    protected string CreaMailCliente(TotaliCarrello totali, CarrelloCollection prodotti, string Lingua)
    {
        string TestoMail = "";
        //MAIL PER IL CLIENTE DI CONFERMA ORDINE
        TestoMail = "<div style='width:600px;font-size:14px'><table  style='font-size:14px;' cellpadding='0' cellspacing='0'><tr><td  valign='top'>" + "<img width=\"200\" src=\"" + WelcomeLibrary.STATIC.Global.percorsobaseapplicazione + "/images/main_logo.png\" />" + "</td></tr>";
        TestoMail += "<div style='width:600px;'><table cellpadding='0' cellspacing='0'><tr><td  valign='top'> </td></tr>";
        //Testo mail
        TestoMail += "<tr><td style='font-size:14px;'><br/> " + references.ResMan("Common", Lingua, "OrdineSoggettomailRiepilogo") + "<a href='" + WelcomeLibrary.STATIC.Global.percorsobaseapplicazione + "'>" + ConfigManagement.ReadKey("Nome") + "</a> da " + totali.Denominazionecliente + " <br/>";
        TestoMail += "<br/><font color='#e12222'>Dettaglio Ordine</font> " + "<br/>";

        TestoMail += "<br/><b>Fatturazione</b> :<br/> ";
        TestoMail += totali.Indirizzofatturazione + "<br/>";
        if (!string.IsNullOrEmpty(totali.Indirizzospedizione))
        {
            TestoMail += "<br/><b>Spedizione</b> :<br/>";
            TestoMail += totali.Indirizzospedizione;
        }
        TestoMail += "</td></tr>";
        if (!string.IsNullOrEmpty(totali.Note))
            TestoMail += "<tr><td> <br/>Note : " + totali.Note + "<br/></td></tr>";

        TestoMail += "<tr><td><table cellpadding='0' cellspacing='0'>";
        TestoMail += "<tr><td style='font-size:14px;'><br/><br/><b>CODICE ORDINE :</b> " + totali.CodiceOrdine + "<br/><br/></td></tr>";
        int i = 1;
        foreach (Carrello item in prodotti)
        {
            TestoMail += "<tr><td style=' font-size:14px;'><b>Articolo:</b> ";
            switch (Lingua)
            {
                case "I":
                    TestoMail += item.Offerta.DenominazioneI + "<br/>";
                    break;
                case "GB":
                    TestoMail += item.Offerta.DenominazioneGB + "<br/>";
                    break;
                case "RU":
                    TestoMail += item.Offerta.DenominazioneRU + "<br/>";
                    break;
                case "FR":
                    TestoMail += item.Offerta.DenominazioneFR + "<br/>";
                    break;
            }

            if (item.Dataend != null && item.Datastart != null)
            {
                TestoMail += "<b>" + references.ResMan("Common", Lingua, "formtestoperiododa") + " " + string.Format("{0:dd/MM/yyyy HH:mm:ss}", item.Datastart.Value) + "</b> ";
                TestoMail += "<b>" + references.ResMan("Common", Lingua, "formtestoperiodoa") + " " + string.Format("{0:dd/MM/yyyy HH:mm:ss}", item.Dataend.Value) + "</b><br/>";
            }
            string valore1 = (String)eCommerceDM.Selezionadajson(item.jsonfield1, "Caratteristica1", Lingua);
            string valore2 = (String)eCommerceDM.Selezionadajson(item.jsonfield1, "Caratteristica2", Lingua);
            if (!string.IsNullOrEmpty(valore1) || !string.IsNullOrEmpty(valore2))
            {
                valore1 = references.TestoCaratteristica(0, valore1, Lingua);
                if (!string.IsNullOrEmpty(valore1))
                    TestoMail += " <b>" + references.ResMan("basetext", Lingua, "formtesto" + "Caratteristica1") + ": " + "</b>" + valore1;
                valore2 = references.TestoCaratteristica(1, valore2, Lingua);
                if (!string.IsNullOrEmpty(valore2))
                    TestoMail += " <b>" + references.ResMan("basetext", Lingua, "formtesto" + "Caratteristica2") + ": " + "</b>" + valore2;
            }

            if (!string.IsNullOrEmpty(item.jsonfield1))
            {
                string valore3 = (String)eCommerceDM.Selezionadajson(item.jsonfield1, "adulti", Lingua);
                string valore4 = (String)eCommerceDM.Selezionadajson(item.jsonfield1, "bambini", Lingua);
                if (!string.IsNullOrEmpty(valore3))
                    TestoMail += "<br/>" + "<b>" + references.ResMan("basetext", Lingua, "formtesto" + "adulti") + ": " + "</b>" + valore4 + "<br/>";
                if (!string.IsNullOrEmpty(valore4))
                    TestoMail += " " + "<b>" + references.ResMan("basetext", Lingua, "formtesto" + "bambini") + ": " + "</b>" + valore4 + "<br/>";
            }
            //////////////////////////////////
            //INSERIMENTO DATI PER SCAGLIONI
            //////////////////////////////////
            //string prezzoscaglione = eCommerceDM.Selezionadajson(item.jsonfield1, "prezzo", Lingua);
            string datapartenza = WelcomeLibrary.UF.Utility.reformatdatetimestring((string)eCommerceDM.Selezionadajson(item.jsonfield1, "datapartenza", Lingua));
            string dataritorno = WelcomeLibrary.UF.Utility.reformatdatetimestring((string)eCommerceDM.Selezionadajson(item.jsonfield1, "dataritorno", Lingua));
            string idscaglione = (String)eCommerceDM.Selezionadajson(item.jsonfield1, "idscaglione", Lingua);
            //scaglione completo nel carrello
            //Scaglioni scaglionedacarrello =  Newtonsoft.Json.JsonConvert.DeserializeObject<Scaglioni>((String)eCommerceDM.Selezionadajson(item.jsonfield1, "scaglione", Lingua));
            if (!string.IsNullOrEmpty(idscaglione) || !string.IsNullOrEmpty(datapartenza))
            {
                if (!string.IsNullOrEmpty(datapartenza))
                    TestoMail += "<b>" + references.ResMan("basetext", Lingua, "formtesto" + "scaglionedata") + "</b>" + datapartenza + "<br/>";
                if (!string.IsNullOrEmpty(idscaglione))
                    TestoMail += "<b>" + references.ResMan("basetext", Lingua, "formtesto" + "scaglionedataritorno") + "</b>" + dataritorno + "<br/>";
                if (!string.IsNullOrEmpty(idscaglione))
                    TestoMail += "<b>" + references.ResMan("basetext", Lingua, "formtesto" + "scaglioneid") + "</b>" + idscaglione + "<br/>";
            }
            if (!string.IsNullOrWhiteSpace(item.CodiceProdotto))
                TestoMail += "<b>Codice Articolo : </b>" + item.CodiceProdotto + "<br/>";
            TestoMail += "<b>Id articolo :</b> " + item.Offerta.Id.ToString() + "<br/>";
            if (!string.IsNullOrEmpty(item.Campo2))
            {
                List<ModelCarCombinate> listCarr = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ModelCarCombinate>>(item.Offerta.Xmlvalue);
                ResultAutocomplete taglia = new ResultAutocomplete();
                ResultAutocomplete colore = new ResultAutocomplete();
                ModelCarCombinate elem = listCarr.Find(e => e.id == item.Campo2);
                if (elem != null)
                    TestoMail += " - " + references.ResMan("BaseText", Lingua, "selectcat1") + " : " + elem.caratteristica1.value + " - " + references.ResMan("BaseText", Lingua, "selectcat2") + " : " + elem.caratteristica2.value + "<br/>";
            }
            TestoMail += "<b> Quantità :</b> " + item.Numero + "<br/>";
            if (item.Prezzo != 0)
                TestoMail += "<b>  Prezzo Unitario :</b> " + item.Prezzo + " €<br/>";

            //QUI POSSIAMO INSERIRE I DETTAGLI SE E' UN PACCHETTO KIT OFFERTA
            //if (item != null && item.Offerta != null && item.Offerta.CodiceTipologia == "rif000101")
            //{
            //    TestoMail += "      Prodotti Contenuti nel pacchetto:<br/>";
            //    List<ResultAutocomplete> listprod = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ResultAutocomplete>>(item.Offerta.XmlValue);
            //    foreach (ResultAutocomplete p in listprod) //Calcolo il totale non scontato del kit ->
            //    {
            //        TestoMail += "      Codice:" + p.codice + " Descrizione:" + p.value + " Qta:" + p.qta + "<br/>";
            //    }
            //}

            TestoMail += "<br/></td></tr>";
            i++;
        }

        TestoMail += "<tr><td>Totale Articoli " + totali.TotaleOrdine + " € </td></tr>";
        if (totali.TotaleSconto != 0)
            TestoMail += "<tr><td><br/>Sconto applicato " + totali.TotaleSconto + " € </td></tr>";
        TestoMail += "<tr><td>";
        if (totali.TotaleSpedizione != 0)
            TestoMail += "<br/>Spese di spedizione " + totali.TotaleSpedizione + " €<br/>";
        if (totali.TotaleSmaltimento != 0)
            TestoMail += "<br/>Spese smaltimento(PFU) " + totali.TotaleSmaltimento + " €<br/>";
        if (totali.TotaleAssicurazione != 0)
            TestoMail += "Totale Assicurazione " + totali.TotaleAssicurazione + "  €<br/>";
        if (totali.Nassicurazioni != 0)
            TestoMail += "( Assicurazione per " + totali.Nassicurazioni + "  Persone )<br/>";
        TestoMail += "<b>Totale ordine complessivo:</b> " + (totali.TotaleAcconto + totali.TotaleSaldo) + " €</td></tr>";

        if (totali.Percacconto != 100)
        {
            TestoMail += "<tr><td><b>PAGATO ACCONTO </b> " + totali.Percacconto + "% :</b> " + (totali.TotaleAcconto) + " €</td></tr>";
            TestoMail += "<tr><td><b>DA SALDARE ENTRO 30 GG DATA PARTENZA " + ":</b> " + totali.TotaleSaldo + " €</td></tr>";
        }
        else
            TestoMail += "<tr><td><b>PAGATO SALDO  :</b> " + (totali.TotaleAcconto + totali.TotaleSaldo) + " €</td></tr>";

        TestoMail += "<tr><td><br/>Metodo di pagamento: " + references.ResMan("Common", Lingua, "chk" + totali.Modalitapagamento).ToString() + " </td></tr>";
        //chiudo tabella e riga relativa
        TestoMail += "</table></td><tr/>";
        //testo di chiusura
        TestoMail += "<tr><td><br/>Il cliente ha selezionato :  " + references.ResMan("Common", Lingua, "chkcondizioni").ToString() + " </td></tr>";

        TestoMail += "<tr><td style=' font-size:14px;'><br/>" + references.ResMan("Common", Lingua, "TestoConfermaOrdine").ToString() + " </td></tr>";
        TestoMail += "<tr><td style=' font-size:14px;'><br/>" + references.ResMan("Common", Lingua, "TestoSaluti").ToString() + "<br/>" + references.ResMan("Common", Lingua, "TestoHomeIndex").ToString() + "</td></td> <br/>";

        //Inserisco il footer con i dati
        TestoMail += "<tr><td style='text-align:center; font-size:14px;'><br/><br/>" + references.ResMan("Common", Lingua, "txtFooter").ToString();

        TestoMail += "</td></tr></table></div>";

        return TestoMail;
    }
    private void InsertEventoBooking(CarrelloCollection prodotti, TotaliCarrello totali, string filtrotipologia)
    {
        foreach (Carrello c in prodotti)
        {
            if (c.Dataend != null && c.Datastart != null)
            {
                if (!string.IsNullOrEmpty(filtrotipologia))
                {
                    if (c.Offerta.CodiceTipologia != filtrotipologia) continue;
                }
                try
                {
                    Eventi tmpelement = new Eventi();
                    tmpelement.Enddate = c.Dataend.Value;
                    tmpelement.Startdate = c.Datastart.Value;
                    tmpelement.Prezzo = c.Prezzo;
                    tmpelement.Idattivita = c.id_prodotto;
                    tmpelement.Soggetto = "Order.n. " + c.CodiceOrdine;
                    if (totali.Percacconto != 100) tmpelement.Soggetto += " (Richiesto Acconto : " + totali.Percacconto + "%)";
                    tmpelement.Testoevento = "";
                    tmpelement.Idcliente = c.ID_cliente;
                    tmpelement.Idvincolo = "";
                    tmpelement.Codicerichiesta = "";//identificativo della richiesta a calendario generato all'inserimento
                    tmpelement.Status = 1; //Stato confermato dell'evento/prenotazione pagate con paypal
                    tmpelement.Jsonfield1 = c.jsonfield1;

                    bookingDM.dbInsertEvent(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, tmpelement);
                }
                catch { }
            }

        }
    }
    /// <summary>
    /// torna true se non disponibile il periodo per i prodotti scelti
    /// </summary>
    /// <param name="prodotti"></param>
    /// <returns></returns>
    private bool VerificaDisponibilitaEventoBooking(CarrelloCollection prodotti, string filtrotipologia)
    {
        bool free = true;
        foreach (Carrello c in prodotti)
        {
            if (!string.IsNullOrEmpty(filtrotipologia))
            {
                if (c.Offerta.CodiceTipologia != filtrotipologia) continue;
            }
            if (c.Dataend != null && c.Datastart != null)
            {
                try
                {
                    bool nonelem = bookingDM.dbIsFree(WelcomeLibrary.STATIC.Global.NomeConnessioneDb, "0", c.Datastart.Value, c.Dataend.Value, c.id_prodotto.ToString());
                    if (!nonelem)
                    {
                        free = false;
                    }
                }
                catch { }
            }

        }
        return free;
    }


    public bool IsReusable
    {
        get
        {
            return false;
        }
    }

}

